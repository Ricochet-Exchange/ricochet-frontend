import {
  DAIAddress,
  DAIxAddress,
  daixEthxExchangeAddress,
  daixMaticxExchangeAddress,
  daixMkrxExchangeAddress,
  ethxDaixExchangeAddress,
  hostAddress,
  idaAddress,
  IDLEAddress,
  IDLExAddress,
  MATICxAddress,
  maticxDaixExchangeAddress,
  maticxUsdcxExchangeAddress,
  MKRAddress,
  MKRxAddress,
  mkrxDaixExchangeAddress,
  mkrxUsdcxExchangeAddress,
  rexReferralAddress,
  RICAddress,
  rickosheaAppAddress,
  SUSHIAddress,
  SUSHIxAddress,
  twoWayMarketAddress,
  USDCAddress,
  USDCxAddress,
  usdcxEthSlpxExchangeAddress,
  usdcxIdleExchangeAddress,
  usdcxMaticxExchangeAddress,
  usdcxMkrxExchangeAddress,
  usdcxRicExchangeAddress,
  usdcxWbtcxExchangeAddress,
  usdcxWethxExchangeAddress,
  WBTCAddress,
  WBTCxAddress,
  wbtcxUsdcxExchangeAddress,
  WETHAddress,
  WETHxAddress,
  wethxUsdcxExchangeAddress,
} from 'constants/polygon_config';

export enum ExchangeKeys {
  'DAI_ETH' = 'daiEth',
  'DAI_MATIC' = 'daiMatic',
  'DAI_MKR' = 'daiMkr',
  'ETH_DAI' = 'ethDai',
  'MATIC_DAI' = 'maticDai',
  'MATIC_USDC' = 'maticUsdc',
  'MKR_DAI' = 'mkrDai',
  'MKR_USDC' = 'mkrUsdc',
  'USDC_ETH_SLP' = 'usdcEthSlp',
  'USDC_IDLE' = 'usdcIdle',
  'USDC_MATIC' = 'usdcMatic',
  'USDC_MKR' = 'usdcMkr',
  'USDC_RIC' = 'usdcRic',
  'USDC_WBTC' = 'usdcWbtc',
  'USDC_WETH' = 'usdcWeth',
  'WBTC_USDC' = 'wbtcUsdc',
  'WETH_USDC' = 'wethUsdc',
  'MATICx' = 'maticx',
  'MKRx' = 'mkrx',
  'MKR' = 'mkr',
  'DAIx' = 'daix',
  'DAI' = 'dai',
  'USDCx' = 'usdcx',
  'USDC' = 'usdc',
  'WETHx' = 'wethx',
  'WETH' = 'weth',
  'WBTCx' = 'wbtcx',
  'WBTC' = 'wbtc',
  'HOST' = 'host',
  'IDA' = 'ida',
  'RICapp' = 'ricApp',
  'RIC' = 'ric',
  'SUSHIx' = 'sushix',
  'SUSHI' = 'sushi',
  'IDLEx' = 'idlex',
  'IDLE' = 'idle',
  'Referral' = 'referral',
  'TWOWAYMARKET' = 'twoWayMarket',
}

export const getExchangeAddressFromKey = (exchangeKey: ExchangeKeys) => {
  const addresses = {
    daiEth: daixEthxExchangeAddress,
    daiMatic: daixMaticxExchangeAddress,
    daiMkr: daixMkrxExchangeAddress,
    ethDai: ethxDaixExchangeAddress,
    maticDai: maticxDaixExchangeAddress,
    maticUsdc: maticxUsdcxExchangeAddress,
    mkrDai: mkrxDaixExchangeAddress,
    mkrUsdc: mkrxUsdcxExchangeAddress,
    usdcEthSlp: usdcxEthSlpxExchangeAddress,
    usdcIdle: usdcxIdleExchangeAddress,
    usdcMatic: usdcxMaticxExchangeAddress,
    usdcMkr: usdcxMkrxExchangeAddress,
    usdcRic: usdcxRicExchangeAddress,
    usdcWbtc: usdcxWbtcxExchangeAddress,
    usdcWeth: usdcxWethxExchangeAddress,
    wbtcUsdc: wbtcxUsdcxExchangeAddress,
    wethUsdc: wethxUsdcxExchangeAddress,
    maticx: MATICxAddress,
    mkrx: MKRxAddress,
    mkr: MKRAddress,
    daix: DAIxAddress,
    dai: DAIAddress,
    usdcx: USDCxAddress,
    usdc: USDCAddress,
    wethx: WETHxAddress,
    weth: WETHAddress,
    wbtcx: WBTCxAddress,
    wbtc: WBTCAddress,
    host: hostAddress,
    ida: idaAddress,
    ricApp: rickosheaAppAddress,
    ric: RICAddress,
    sushix: SUSHIxAddress,
    sushi: SUSHIAddress,
    idlex: IDLExAddress,
    idle: IDLEAddress,
    referral: rexReferralAddress,
    twoWayMarket: twoWayMarketAddress,
  };

  return addresses[exchangeKey];
};
